class i{static mimeDbCdnVersion="4.0.0-1.54.0";static cdnBase=`https://cdn.jsdelivr.net/npm/mime-db-cdn@${i.mimeDbCdnVersion}`;cache;#t={};async fetch(...t){return globalThis.fetch(...t)}constructor({fetch:t,cacheMaxEntries:e}={}){t&&(this.fetch=t),e&&(this.#t.max=e)}async#e(){if(this.cache===void 0&&Object.keys(this.#t).length!==0){const{LRUCache:t}=await import("./utils/lru-cache.min.js");this.cache=new t(this.#t)}return this.cache}async query(t){const e=i.cdnBase+`/mime-types/${t}/data.json`;return this.fetch(e).then(s=>{if(s.status===404)throw new Error("Not Found");return s.json()})}async mimeToExtensions(t){const[e]=t.split(";"),s=await this.#e();let n=s?.get(e);return n===void 0&&({extensions:n}=await this.query(e),s?.set(e,n)),n??[]}getExtensions=this.mimeToExtensions;async extensionToMimes(t){const e=t.split("/").pop().split(".").pop(),s=await this.#e();let n=s?.get(e);if(n===void 0){const c=i.cdnBase+`/extensions/${e}/data.json`;({mimeTypes:n}=await this.fetch(c).then(o=>{if(o.status===404)throw new Error("Not Found");return o.json()})),s?.set(e,n)}return n??[]}getTypes=this.extensionToMimes;async extensionToMime(t){const[e,...s]=await this.getTypes(t);return e}getType=this.extensionToMime}export{i as default};
